# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FavoriteGenre {
  id: Int!
  user: User!
  genreId: Float!
}

type FavoriteMovie {
  id: Int!
  user: User!
  movieId: Float!
  isWatched: Boolean!
}

type User {
  id: Int!
  email: String!
  password: String!
  favoriteMovies: [FavoriteMovie!]!
  favoriteGenres: [FavoriteGenre!]!
}

type RequestUser {
  id: Int!
  email: String!
}

type MutationResult {
  success: Boolean!
}

type GenreGQL {
  id: Int!
  name: String!
}

type BaseMovieGQL {
  id: Int!
  backdropPath: String!
  genreIds: [Int!]!
  overview: String!
  popularity: Float!
  posterPath: String!
  releaseDate: String!
  title: String!
  voteAverage: Float!
  voteCount: Int!
}

type MoviesResponseGQL {
  page: Int!
  results: [BaseMovieGQL!]!
  totalPages: Int!
  totalResult: Int!
}

type AuthResponse {
  token: String!
}

type Query {
  getUser: RequestUser!
  getUserGenres: [FavoriteGenre!]!
  getUserMovies: [FavoriteMovie!]!
  getAllGenres(language: String): [GenreGQL!]!
  getMoviesByFilters(language: String, genreIds: [Int!], minCountVotes: Int, releaseYear: Int, page: Int): MoviesResponseGQL!
  getFavoriteMoviesByIds(ids: [Int!]!, language: String, page: Int): MoviesResponseGQL!
  getMovieById(id: Int!, language: String): BaseMovieGQL!
}

type Mutation {
  toggleUserGenre(genreId: Int!): MutationResult!
  toggleUserMovie(movieId: Int!): MutationResult!
  toggleWatchMovie(movieId: Int!): FavoriteMovie!
  login(email: String!, password: String!): AuthResponse!
}